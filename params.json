{"name":"node-potter","google":"","body":"\r\nnode-potter\r\n===========\r\n\r\nDraw and Print Something in 3D Voxel Space\r\n\r\n## overview\r\n\r\n  A library to draw things in a 3D grid space using voxels (3D pixels).\r\n\r\n  The interface is simple - and you export your creation to a few file formats.\r\n\r\n  For an example, I did my best to create an accurate, voxel-based dog:\r\n  \r\n  ![doogy](http://img528.imageshack.us/img528/518/doggy.png)\r\n   \r\n  Cool? Ok, you can do it, too. You just have to npm install potter.\r\n\r\n  The ultimate goal is to support different material-by-voxel, to allow creation of models and objects with different colors, textures, materials in the inside (not just surface) \r\n\r\n  For the moment very few 3D printers support this (?), so you may have to build your own. Yep, this is hacker's stuff.\r\n\r\n  That said, you can try an experimental .STL export right now, to print models using common commercial and DIY printers.\r\n  (Basically, voxels are converted to 3D cubes, mades of regular triangles. Unfortunately, this means HUGE files, like 200 megabytes)\r\n\r\n\r\n## why\r\n\r\n  Because it's funny. If you don't get why, you should probably browse something else on Github.\r\n\r\n## TODO\r\n  * advanced streaming features - better buffering, and broadcast..\r\n  * .. in order to develop a WebGL renderer to visualize the voxel stream\r\n  * support binary STL (and colors)\r\n  * implement more materials: http://www.matbase.com/matbase_material_properties_database.html\r\n\r\n## install\r\n\r\n  globally:\r\n\r\n    $ npm install potter -g\r\n\r\n  as a dependency of your Node project:\r\n\r\n    $ npm install potter\r\n\r\n\r\n## usage\r\n\r\n``` javascript\r\n\r\n  var Potter = require('potter');\r\n\r\n  // initialize a voxel matrix\r\n  var pot = new Potter({\r\n    size: [100, 100, 100]\r\n  });\r\n\r\n  // define a new material\r\n  var plastic = pot.material(\"plastic\", \"red\");\r\n\r\n  // and use it\r\n  pot.use(plastic);\r\n  \r\n  // draw voxels using plastic\r\n  pot.dot([ 5, 5, 5 ]);\r\n  pot.dot([ 4, 5, 6 ]);\r\n\r\n  // it's easier if you use it this way\r\n  var p1 = [20, 20, 15];\r\n  var p2 = [15, 40, 15];\r\n  var p3 = [30, 20, 30];\r\n\r\n  // you can draw lines as well\r\n  pot.line(p1, p3);\r\n\r\n  // you can also draw over a \"3D path\"\r\n  pot.trace([ p1, p2, p3 ], function(p) {\r\n    var radius = 3;\r\n    pot.sphere(p, radius, radius + 2);\r\n  });\r\n\r\n  // you can save to a variety of point cloud formats\r\n  pot.save(\"model.pcd\"); \r\n\r\n  // experimental export to STL\r\n  pot.save(\"model.stl\");\r\n\r\n  // async syntax is supported\r\n  pot.save(\"model.xyz\", function() {\r\n    console.log(\"file saved\");\r\n  });\r\n\r\n```\r\n\r\n## Demo\r\n\r\n### In CoffeeScript - please fasten your seatbelt\r\n\r\n``` coffeescript\r\n#!/usr/bin/env coffee\r\n\r\n{log,error,inspect} = require 'util'\r\nPotter = require 'potter'\r\n\r\nname = \"dog\"\r\n\r\n# create a new voxel matrix\r\ndog = new Potter size: [1000,1000,1000]\r\n\r\n# create a brown plastic material. let's call it \"fur\"\r\nfur = dog.material \"plastic\", \"brown\"\r\ndog.use fur\r\n\r\n# front\r\npfr = [100, 100, 100]\r\npft = [200, 200, 200]\r\npfl = [100, 300, 100]\r\n\r\n# back\r\npbr = [500, 100, 100]\r\npbt = [400, 200, 200]\r\npbl = [500, 300, 100]\r\n\r\nleg  = (p) -> dog.sphere p, 10, 12\r\nbody = (p) -> dog.sphere p, 30, 32\r\n\r\n# front legs\r\ndog.trace [pfr,pft,pfl], leg\r\n\r\n# body\r\ndog.trace [pft,pbt], body\r\n\r\n# back legs\r\ndog.trace [pbr,pbt,pbl], leg\r\n\r\n# export the dog voxel matrix to STL, for 3D printing\r\nlog \"saving..\"\r\ndog.save \"examples/exports/#{name}.stl\", ->\r\n  log \"file saved\"\r\n\r\n```\r\n\r\n  Then if you run it: \r\n\r\n\r\n    $ coffee examples/basic/test_dog.coffee \r\n\r\n  It should give you this:\r\n\r\n![doggy](http://img641.imageshack.us/img641/3148/doggy2.png)\r\n\r\n  With a lot of voxels. Really. A lot.\r\n\r\n  WARNING: it make take a couple of MINUTES for Node.js\r\n  to write all the buffer to disk (this happens AFTER the \"file saved\" msg,\r\n  and freeze the app for some time)\r\n\r\n## Running the other examples\r\n\r\n### Sponge\r\n\r\n    $ coffee examples/basic/ref_sponge.coffee \r\n\r\n### Egg\r\n\r\n    $ coffee examples/basic/ref_egg.coffee \r\n\r\n## List of functions\r\n\r\n###\r\n\r\n  Documentation legend\r\n\r\n```scala\r\n  foo ({ x:Number });\r\n```\r\n  means function foo takes an object as argument, this object should have an entry with key 'x' and value of type Number\r\n\r\n\r\n```scala\r\n  foo ( x=Number ); \r\n```\r\n  means function foo takes one argument, x, which should be a Number\r\n\r\n\r\n\r\n### pot = new Potter({size:[x,y,z]})\r\n\r\n### Material m = pot.material({ })\r\n\r\n  Create a material\r\n \r\n### pot.use(material=Material)\r\n\r\n  Use a material for all next drawing operations\r\n\r\n### pot.dot(position=[x,y,z])\r\n\r\n  Draw a voxel at a give coordinate\r\n\r\n### pot.line(from=[x1,y1,z1], to=[x2,y2,z2])\r\n\r\n  Draw a line in 3D\r\n\r\n### pot.sphere(position=[x,y,z], inner=Number, outer=Number)\r\n\r\n  Draw a sphere, using a center, inner radius (radius of the inside hole), and outer radius (the 'real' radius)\r\n\r\n### pot.section(position=[x,y,z],plane=[u,v,w])\r\n\r\nCut the model - do a section (nice for autopsy or medical research)\r\n\r\nWhere x,y,z are the center of the section plane,\r\nand u,v,w is the plane axis. example:\r\n\r\n```javascript\r\npot.section([x,y,z], [1,0,0]);\r\n```\r\n\r\nwill cut the model in half, on the X axis,\r\n\r\n```javascript\r\npot.section([x,y,z], [-1,0,0]);\r\n```\r\n\r\nwill cut the model in half, on the X axis, but in the other direction, and:\r\n\r\n```javascript\r\npot.section([x,y,z], [0,1,1]);\r\n```\r\n\r\nwill cut the model in a quarter, on the Y/Z axis.\r\n\r\n## Supported output format\r\n\r\n### STL\r\n\r\n  Yes! it is working! I got inspiration from\r\n\r\n  https://github.com/codys/minecraft.print/blob/master/minecraft_print.py\r\n\r\n\r\n### PCD (Point Cloud Data)\r\n\r\n  Specs: \r\n  http://pointclouds.org/documentation/tutorials/pcd_file_format.php\r\n\r\n  Sample:\r\n\r\n```\r\nVERSION .7\r\nFIELDS x y z rgb\r\nSIZE 4 4 4 4\r\nTYPE I I I I\r\nCOUNT 1 1 1 1\r\nWIDTH 3\r\nHEIGHT 1\r\nVIEWPOINT 0 0 0 1 0 0 0\r\nPOINTS 3\r\nDATA ascii\r\n5 5 5 1\r\n4 5 6 1\r\n5 3 7 2\r\n```\r\n\r\n### PTS\r\n\r\n  Spec: \r\n\r\n```\r\n\r\n   NB_POINTS\r\n   X Y Z INTENSITY R G B\r\n   X Y Z INTENSITY R G B\r\n   ...\r\n\r\n```\r\n  Sample:\r\n\r\n```\r\n3\r\n5 5 5 1 0 0 2\r\n4 5 6 1 0 0 2\r\n5 3 7 1 0 0 3\r\n```\r\n\r\n### XYZ\r\n\r\n  Sample:\r\n\r\n```\r\n5 5 5\r\n4 5 6\r\n5 3 7\r\n```\r\n\r\n\r\n## Changelog\r\n\r\n### 0.0.2\r\n \r\n  * better Potter::sphere() algorithm, with optional thickness (useful for fillings!)\r\n  * added Potter::section(), you can use it to cut a model for autopsy\r\n  * added Potter.vacuum, which is a shortcut to material 0 (vacuum)\r\n  * various minor bugfixes\r\n\r\n### 0.0.1\r\n\r\n  * second, less crappy version \r\n  * fucking much faster (except if you do export STL files)\r\n\r\n### 0.0.0\r\n\r\n  * initial crappy version\r\n\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Draw Something In 3D Voxel Space"}