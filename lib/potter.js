// Generated by CoffeeScript 1.3.3
(function() {
  var Material, Potter, clay, error, fs, log, pot, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error;

  fs = require('fs');

  Material = (function() {

    function Material(id, name, color, type) {
      this.id = id;
      this.name = name;
      this.color = color;
      this.type = type != null ? type : 'continuous';
    }

    return Material;

  })();

  Potter = (function() {

    function Potter(url) {
      this.emptySlice = __bind(this.emptySlice, this);

      var x, _i, _ref1;
      this.size = {
        x: [-20, 20],
        y: [-20, 20],
        z: [-20, 20]
      };
      this.length = Math.abs(this.size.x[0]) + Math.abs(this.size.x[1]);
      this.width = Math.abs(this.size.y[0]) + Math.abs(this.size.y[1]);
      this.height = Math.abs(this.size.z[0]) + Math.abs(this.size.z[1]);
      log("initializing " + this.height + " slices");
      for (x = _i = 0, _ref1 = this.height; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = 0 <= _ref1 ? ++_i : --_i) {
        this.slices = false;
      }
      this.materials = [];
      this.lastUsed = false;
    }

    Potter.prototype.createMaterial = function(name, color, type) {
      var material;
      material = new Material(this.materials.length, name, color, type);
      return this.materials.push(material);
    };

    Potter.prototype.map = function(x, y, z) {
      return [Math.abs(this.size.x[0]) + x, Math.abs(this.size.y[0]) + y, Math.abs(this.size.z[0]) + z];
    };

    Potter.prototype.emptySlice = function() {
      var i, j, row, slice, _i, _j, _ref1, _ref2, _results;
      slice = [];
      _results = [];
      for (i = _i = 0, _ref1 = this.length; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        for (j = _j = 0, _ref2 = this.width; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; j = 0 <= _ref2 ? ++_j : --_j) {
          row = 0;
        }
        _results.push(slice.push(row));
      }
      return _results;
    };

    Potter.prototype.use = function(material) {
      var msg;
      if (material) {
        return this.lastUsed = material;
      } else {
        msg = "Error, no material";
        error(msg);
        throw msg;
      }
    };

    Potter.prototype.draw = function(x, y, z, material) {
      var i, j, msg, slice, sliceId, _ref1;
      if (material == null) {
        material = false;
      }
      _ref1 = this.map(x, y, z), i = _ref1[0], j = _ref1[1], sliceId = _ref1[2];
      slice = this.slices[sliceId];
      if (!slice) {
        slice = this.emptySlice();
      }
      if (material) {
        this.lastUsed = material;
      } else {
        material = this.lastUsed;
      }
      if (!material) {
        msg = "Error, no material";
        error(msg);
        throw msg;
        return;
      }
      return slice[i][j] = material.id;
    };

    Potter.prototype.save = function() {};

    Potter.prototype["export"] = function(url) {};

    return Potter;

  })();

  pot = new Potter();

  clay = pot.createMaterial("clay", "brown");

  pot.draw(5, 5, 5, clay);

  pot.draw(5, 5, 6);

  pot.draw(5, 5, 7);

}).call(this);
