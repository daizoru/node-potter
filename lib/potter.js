// Generated by CoffeeScript 1.3.3
(function() {
  var Material, async, error, fs, inspect, len, log, readPath, rgbToHex, rgbToInt, setPixel, toRGB, wait, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  fs = require('fs');

  _ref1 = require('./toolbox'), wait = _ref1.wait, async = _ref1.async;

  len = function(p1, p2, round) {
    var dx, dy, dz, sm;
    if (round == null) {
      round = true;
    }
    dx = p2[0] - p1[0];
    dy = p2[1] - p1[1];
    dz = p2[2] - p1[2];
    sm = dx * dx + dy * dy + dz * dz;
    if (round) {
      return Math.round(Math.sqrt(sm));
    } else {
      return Math.sqrt(sm);
    }
  };

  readPath = function(p1, p2) {
    var dx, dy, dz, i, points, r, resolution, sm, x, y, z, _i;
    dx = p2[0] - p1[0];
    dy = p2[1] - p1[1];
    dz = p2[2] - p1[2];
    sm = dx * dx + dy * dy + dz * dz;
    resolution = Math.round(Math.sqrt(sm));
    if (resolution < 1) {
      return [];
    }
    points = [];
    for (i = _i = 0; 0 <= resolution ? _i <= resolution : _i >= resolution; i = 0 <= resolution ? ++_i : --_i) {
      r = i / resolution;
      x = Math.round(p1[0] + dx * r);
      y = Math.round(p1[1] + dy * r);
      z = Math.round(p1[2] + dz * r);
      points.push([x, y, z]);
    }
    return points;
  };

  toRGB = function(num) {
    return [num >> 16, num >> 8 & 255, num & 255];
  };

  rgbToInt = function(r, g, b) {
    return (r << 16) + (g << 8) + b;
  };

  rgbToHex = function(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  };

  setPixel = function(img, x, y, r, g, b, a) {
    var index;
    index = (x + y * img.width) * 4;
    img.data[index + 0] = r;
    img.data[index + 1] = g;
    img.data[index + 2] = b;
    return img.data[index + 3] = a;
  };

  Material = (function() {

    function Material(id, params) {
      var b, config, g, k, r, v, _ref2;
      this.id = id;
      if (params == null) {
        params = {};
      }
      config = {
        name: "default",
        type: "continuous",
        color: "grey",
        density: 1.43e6,
        scale: 1e-2,
        data: {}
      };
      for (k in params) {
        v = params[k];
        config[k] = v;
      }
      for (k in config) {
        v = config[k];
        this[k] = v;
      }
      _ref2 = this.rgb = toRGB(this.id), r = _ref2[0], g = _ref2[1], b = _ref2[2];
      this.rgbaString = "rgba(" + r + "," + g + "," + b + ",0)";
      this.hexString = rgbToHex(r, g, b);
      this.rgbInt = rgbToInt(r, g, b);
      this.count = 0;
    }

    Material.prototype.toString = function() {
      return "mat " + this.id + " (" + this.name + ") is " + this.color + " and " + this.type;
    };

    Material.prototype.computeMass = function() {
      return this.mass * count;
    };

    return Material;

  })();

  module.exports = (function() {

    function exports(options) {
      this.savePng = __bind(this.savePng, this);

      this.save = __bind(this.save, this);

      this.dig = __bind(this.dig, this);

      this.rename = __bind(this.rename, this);

      this.trace = __bind(this.trace, this);

      this.get = __bind(this.get, this);

      this.section = __bind(this.section, this);

      this.sphere = __bind(this.sphere, this);

      this.map = __bind(this.map, this);

      this.each = __bind(this.each, this);

      this.set = __bind(this.set, this);

      this.dot = __bind(this.dot, this);
      this.size = {
        x: 32,
        y: 32,
        z: 32
      };
      if (options.size != null) {
        if (options.size.length === 3) {
          this.size.x = Math.round(Number(options.size[0]));
          this.size.y = Math.round(Number(options.size[1]));
          this.size.z = Math.round(Number(options.size[2]));
        }
      }
      this.width = Math.abs(this.size.x);
      this.height = Math.abs(this.size.y);
      this.depth = Math.abs(this.size.z);
      this.points = {};
      this.count = 0;
      this.materials = {};
      this.currentMaterial = false;
      this.vacuum = this.material({
        name: "vacuum",
        color: "invisible",
        type: "vacuum"
      });
    }

    exports.prototype.material = function(params) {
      var id, material;
      if (params == null) {
        params = {};
      }
      id = Object.keys(this.materials).length;
      material = new Material(id, params);
      this.materials[id] = material;
      return material;
    };

    exports.prototype.use = function(material) {
      return this.currentMaterial = material ? material : this.vacuum;
    };

    exports.prototype.dot = function(p, overwrite) {
      return this.set(p, this.currentMaterial, overwrite);
    };

    exports.prototype.set = function(p, m, overwrite) {
      var id;
      if (overwrite == null) {
        overwrite = false;
      }
      id = "" + (Math.round(p[0])) + "," + (Math.round(p[1])) + "," + (Math.round(p[2]));
      if (!m || m.id === 0) {
        if (id in this.points) {
          delete this.points[id];
          return this.count--;
        }
      } else {
        if (id in this.points) {
          if (!overwrite) {
            return;
          }
        } else {
          this.count++;
          m.count++;
        }
        return this.points[id] = m;
      }
    };

    exports.prototype.line = function(p1, p2, overwrite) {
      var p, points, _i, _len, _results;
      points = readPath(p1, p2);
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        p = points[_i];
        _results.push(this.dot(p, overwrite));
      }
      return _results;
    };

    exports.prototype.each = function(kernel) {
      var id, material, position, s, _ref2, _results;
      _ref2 = this.points;
      _results = [];
      for (id in _ref2) {
        material = _ref2[id];
        s = id.split(',');
        position = [parseInt(s[0]), parseInt(s[1]), parseInt(s[2])];
        _results.push(kernel(position, material));
      }
      return _results;
    };

    exports.prototype.map = function(kernel) {
      var id, material, position, s, _ref2, _results;
      _ref2 = this.points;
      _results = [];
      for (id in _ref2) {
        material = _ref2[id];
        s = id.split(',');
        position = [parseInt(s[0]), parseInt(s[1]), parseInt(s[2])];
        _results.push(this.set(position, kernel(position, material)));
      }
      return _results;
    };

    exports.prototype.sphere = function(center, inner, outer, overwrite) {
      var c, i, o, x, y, z, _i, _ref2, _ref3, _results;
      i = inner;
      o = outer;
      c = center;
      _results = [];
      for (x = _i = _ref2 = c[0] - o, _ref3 = c[0] + o; _ref2 <= _ref3 ? _i <= _ref3 : _i >= _ref3; x = _ref2 <= _ref3 ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref4, _ref5, _results1;
          _results1 = [];
          for (y = _j = _ref4 = c[1] - o, _ref5 = c[1] + o; _ref4 <= _ref5 ? _j <= _ref5 : _j >= _ref5; y = _ref4 <= _ref5 ? ++_j : --_j) {
            _results1.push((function() {
              var _k, _ref6, _ref7, _ref8, _results2;
              _results2 = [];
              for (z = _k = _ref6 = c[2] - o, _ref7 = c[2] + o; _ref6 <= _ref7 ? _k <= _ref7 : _k >= _ref7; z = _ref6 <= _ref7 ? ++_k : --_k) {
                if ((i <= (_ref8 = len(c, [x, y, z])) && _ref8 <= o)) {
                  _results2.push(this.dot([x, y, z], overwrite));
                } else {
                  _results2.push(void 0);
                }
              }
              return _results2;
            }).call(this));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    exports.prototype.section = function(c, v) {
      var _this = this;
      return this.map(function(p, m) {
        if ((v[0] < 0 && p[0] > c[0]) || (v[0] > 0 && p[0] < c[0])) {
          return;
        }
        if ((v[1] < 0 && p[1] > c[1]) || (v[1] > 0 && p[1] < c[1])) {
          return;
        }
        if ((v[2] < 0 && p[2] > c[2]) || (v[2] > 0 && p[2] < c[2])) {
          return;
        }
        return m;
      });
    };

    exports.prototype.get = function(p) {
      var id, m;
      id = "" + (Math.round(p[0])) + "," + (Math.round(p[1])) + "," + (Math.round(p[2]));
      m = this.points[id];
      if (m != null) {
        return m;
      } else {
        return this.materials[0];
      }
    };

    exports.prototype.trace = function(keypoints, fn) {
      var i, point, points, _i, _ref2, _results;
      _results = [];
      for (i = _i = 0, _ref2 = keypoints.length - 1; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
        points = readPath(keypoints[i], keypoints[i + 1]);
        _results.push((function() {
          var _j, _len, _results1;
          _results1 = [];
          for (_j = 0, _len = points.length; _j < _len; _j++) {
            point = points[_j];
            _results1.push(fn(point));
          }
          return _results1;
        })());
      }
      return _results;
    };

    exports.prototype.rename = function(translations) {
      var newName, oldName, _results;
      _results = [];
      for (oldName in translations) {
        newName = translations[oldName];
        if (oldName in this) {
          _results.push(this[newName] = this[oldName]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    exports.prototype.dig = function() {};

    exports.prototype.save = function(path, onComplete) {
      var _this = this;
      if (onComplete == null) {
        onComplete = function() {};
      }
      return async(function() {
        var Exporter, exp, ext, milestone, msg, progress, wrote;
        ext = path.split(".").slice(-1);
        Exporter = require("./exporters/" + ext);
        if (!Exporter) {
          msg = "could not find exporter for format " + ext;
          error(msg);
          throw msg;
          onComplete();
          return;
        }
        exp = new Exporter(path, {
          nbPoints: _this.count,
          width: _this.width,
          height: _this.height,
          depth: _this.depth,
          matrix: function(p) {
            return _this.get(p);
          }
        });
        wrote = 0;
        progress = 0;
        milestone = Math.round(_this.count * 0.1);
        log("writing voxels:");
        _this.each(function(position, material) {
          exp.write(position, material);
          wrote++;
          if (!(wrote % milestone)) {
            progress += 10;
            return log(" " + progress + "% (" + wrote + ")");
          }
        });
        log(" 100% (" + wrote + ") writing buffer to disk (can take a couple of minutes)..");
        async(function() {
          return exp.close(onComplete);
        });
      });
    };

    exports.prototype.savePng = function(path) {
      var i, out, p, slice, stream, _i, _len, _ref2, _results;
      if (path == null) {
        path = false;
      }
      log("saving:");
      i = -1;
      if (!path) {
        path = __dirname + "/";
      }
      _ref2 = this.slices;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        slice = _ref2[_i];
        i++;
        p = "" + path + "slice_" + i + ".png";
        log(" - " + p);
        out = fs.createWriteStream(p);
        stream = slice[0].createPNGStream();
        stream.on('data', function(chunk) {
          return out.write(chunk);
        });
        _results.push(stream.on('end', function() {}));
      }
      return _results;
    };

    exports.prototype["export"] = function(url) {};

    return exports;

  })();

}).call(this);
