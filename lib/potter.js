// Generated by CoffeeScript 1.3.3
(function() {
  var Canvas, Material, Potter, clay, error, fs, inspect, log, pot, setPixel, toRGB, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  fs = require('fs');

  Canvas = require('canvas');

  toRGB = function(num) {
    return [num >> 16, num >> 8 & 255, num & 255];
  };

  setPixel = function(img, x, y, r, g, b, a) {
    var index;
    index = (x + y * img.width) * 4;
    img.data[index + 0] = r;
    img.data[index + 1] = g;
    img.data[index + 2] = b;
    return img.data[index + 3] = a;
  };

  Material = (function() {

    function Material(id, name, color, type) {
      var b, g, r, _ref1;
      this.id = id;
      this.name = name;
      this.color = color;
      this.type = type != null ? type : 'continuous';
      _ref1 = toRGB(this.id), r = _ref1[0], g = _ref1[1], b = _ref1[2];
      this.rgba = "rgba(" + r + "," + g + "," + b + ",0)";
      log("" + this);
    }

    Material.prototype.toString = function() {
      return "Material(id: " + this.id + ", name: " + this.name + ", color: " + this.color + ", type: " + this.type + ", rgba: " + this.rgba + ")";
    };

    return Material;

  })();

  Potter = (function() {

    function Potter(url) {
      this.save = __bind(this.save, this);

      var canvas, ctx, x, _i, _ref1;
      this.size = {
        x: 12,
        y: 12,
        z: 12
      };
      this.width = Math.abs(this.size.x);
      this.height = Math.abs(this.size.y);
      this.depth = Math.abs(this.size.z);
      log("initializing " + this.depth + " slices");
      this.slices = [];
      for (x = _i = 0, _ref1 = this.depth; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = 0 <= _ref1 ? ++_i : --_i) {
        canvas = new Canvas(this.width, this.height);
        ctx = canvas.getContext('2d');
        this.slices.push([canvas, ctx]);
      }
      this.materials = [];
      this.lastUsed = false;
      this.createMaterial("vacuum", "invisible", "vacuum");
    }

    Potter.prototype.createMaterial = function(name, color, type) {
      var id, material;
      id = this.materials.length;
      material = new Material(id, name, color, type);
      this.materials.push(material);
      return material;
    };

    Potter.prototype.use = function(material) {
      var msg;
      if (material) {
        return this.lastUsed = material;
      } else {
        msg = "Error, no material";
        error(msg);
        throw msg;
      }
    };

    Potter.prototype.draw = function(x, y, z, material) {
      var canvas, ctx, msg, _ref1;
      if (material == null) {
        material = false;
      }
      _ref1 = this.slices[z - 1], canvas = _ref1[0], ctx = _ref1[1];
      if (material) {
        log("using material " + material.id);
        this.lastUsed = material;
      } else {
        material = this.lastUsed;
      }
      if (!material) {
        msg = "Error, no material";
        error(msg);
        throw msg;
        return;
      }
      ctx.fillStyle = material.rgba;
      ctx.fillRect(x, y, 1, 1);
      return ctx.stroke();
    };

    Potter.prototype.save = function(path) {
      var i, out, p, slice, stream, _i, _len, _ref1, _results;
      if (path == null) {
        path = false;
      }
      log("saving:");
      i = -1;
      if (!path) {
        path = __dirname + "/";
      }
      _ref1 = this.slices;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        slice = _ref1[_i];
        i++;
        p = "" + path + "slice_" + i + ".png";
        log(" - " + p);
        out = fs.createWriteStream(p);
        stream = slice[0].createPNGStream();
        stream.on('data', function(chunk) {
          return out.write(chunk);
        });
        _results.push(stream.on('end', function() {}));
      }
      return _results;
    };

    Potter.prototype["export"] = function(url) {};

    return Potter;

  })();

  pot = new Potter();

  clay = pot.createMaterial("clay", "brown");

  pot.draw(5, 5, 5, clay);

  pot.draw(4, 5, 6);

  pot.draw(5, 3, 7);

  pot.save("examples/slices/test_");

}).call(this);
