// Generated by CoffeeScript 1.3.3
(function() {
  var Canvas, Material, Potter, async, clay, error, fs, inspect, log, metal, plastic, pot, rgbToHex, rgbToInt, setPixel, toRGBString, wait, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  fs = require('fs');

  Canvas = require('canvas');

  _ref1 = require('./toolbox'), wait = _ref1.wait, async = _ref1.async;

  toRGBString = function(num) {
    return [num >> 16, num >> 8 & 255, num & 255];
  };

  rgbToInt = function(r, g, b) {
    return (r << 16) + (g << 8) + b;
  };

  rgbToHex = function(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  };

  setPixel = function(img, x, y, r, g, b, a) {
    var index;
    index = (x + y * img.width) * 4;
    img.data[index + 0] = r;
    img.data[index + 1] = g;
    img.data[index + 2] = b;
    return img.data[index + 3] = a;
  };

  Material = (function() {

    function Material(id, name, color, type) {
      var b, g, r, _ref2;
      this.id = id;
      this.name = name;
      this.color = color;
      this.type = type != null ? type : 'continuous';
      _ref2 = this.rgb = toRGBString(this.id), r = _ref2[0], g = _ref2[1], b = _ref2[2];
      this.rgbaString = "rgba(" + r + "," + g + "," + b + ",0)";
      this.hexString = rgbToHex(r, g, b);
      this.rgbInt = rgbToInt(r, g, b);
      log("" + this);
    }

    Material.prototype.toString = function() {
      return "mat " + this.id + " (" + this.name + ") is " + this.color + " and " + this.type;
    };

    return Material;

  })();

  Potter = (function() {

    function Potter(options) {
      this.savePng = __bind(this.savePng, this);

      this.save = __bind(this.save, this);

      var canvas, ctx, x, _i, _ref2;
      this.size = {
        x: 32,
        y: 32,
        z: 32
      };
      if (options.size != null) {
        if (options.size.length === 3) {
          this.size.x = Math.round(Number(options.size[0]));
          this.size.y = Math.round(Number(options.size[1]));
          this.size.z = Math.round(Number(options.size[2]));
        }
      }
      this.width = Math.abs(this.size.x);
      this.height = Math.abs(this.size.y);
      this.depth = Math.abs(this.size.z);
      log("initializing " + this.depth + " slices");
      this.slices = [];
      for (x = _i = 0, _ref2 = this.depth; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; x = 0 <= _ref2 ? ++_i : --_i) {
        canvas = new Canvas(this.width, this.height);
        ctx = canvas.getContext('2d');
        this.slices.push([canvas, ctx]);
      }
      this.nbPoints = 0;
      this.materials = {};
      this.lastUsed = false;
      this.createMaterial("vacuum", "invisible", "vacuum");
    }

    Potter.prototype.createMaterial = function(name, color, type) {
      var id, material;
      id = Object.keys(this.materials).length;
      material = new Material(id, name, color, type);
      this.materials[id] = material;
      return material;
    };

    Potter.prototype.use = function(material) {
      var msg;
      if (material) {
        return this.lastUsed = material;
      } else {
        msg = "Error, no material";
        error(msg);
        throw msg;
      }
    };

    Potter.prototype.draw = function(x, y, z, material) {
      var canvas, ctx, imgd, msg, _ref2;
      if (material == null) {
        material = false;
      }
      _ref2 = this.slices[z], canvas = _ref2[0], ctx = _ref2[1], imgd = _ref2[2];
      if (material) {
        log("using material " + material.id);
        this.lastUsed = material;
      } else {
        material = this.lastUsed;
      }
      if (!material) {
        msg = "Error, no material";
        error(msg);
        throw msg;
        return;
      }
      this.nbPoints++;
      log("drawing at (" + x + ", " + y + ") using: " + material.hexString);
      ctx.fillStyle = material.hexString;
      ctx.fillRect(x, y, 1, 1);
      return ctx.stroke();
    };

    Potter.prototype.save = function(path, onComplete) {
      var _this = this;
      if (onComplete == null) {
        onComplete = function() {};
      }
      return async(function() {
        var Exporter, a, b, canvas, ctx, exp, ext, g, i, imgd, material, materialId, msg, r, slice, x, y, z, _i, _j, _k, _len, _ref2, _ref3, _ref4, _ref5;
        ext = path.split(".").slice(-1);
        Exporter = require("./exporters/" + ext);
        if (!Exporter) {
          msg = "could not find exporter for format " + ext;
          error(msg);
          throw msg;
          onComplete();
          return;
        }
        exp = new Exporter(path, {
          nbPoints: _this.nbPoints,
          onEnd: function() {
            return onComplete();
          }
        });
        z = -1;
        _ref2 = _this.slices;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          slice = _ref2[_i];
          z++;
          canvas = slice[0], ctx = slice[1];
          imgd = ctx.getImageData(0, 0, _this.width, _this.height);
          for (x = _j = 0, _ref3 = _this.width; 0 <= _ref3 ? _j < _ref3 : _j > _ref3; x = 0 <= _ref3 ? ++_j : --_j) {
            for (y = _k = 0, _ref4 = _this.height; 0 <= _ref4 ? _k < _ref4 : _k > _ref4; y = 0 <= _ref4 ? ++_k : --_k) {
              i = (x + y * _this.width) * 4;
              _ref5 = [imgd.data[i], imgd.data[i + 1], imgd.data[i + 2], imgd.data[i + 3]], r = _ref5[0], g = _ref5[1], b = _ref5[2], a = _ref5[3];
              materialId = rgbToInt(r, g, b);
              material = _this.materials[materialId];
              exp.write(x, y, z, material);
            }
          }
        }
        log("calling exp.close()");
        return exp.close();
      });
    };

    Potter.prototype.savePng = function(path) {
      var i, out, p, slice, stream, _i, _len, _ref2, _results;
      if (path == null) {
        path = false;
      }
      log("saving:");
      i = -1;
      if (!path) {
        path = __dirname + "/";
      }
      _ref2 = this.slices;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        slice = _ref2[_i];
        i++;
        p = "" + path + "slice_" + i + ".png";
        log(" - " + p);
        out = fs.createWriteStream(p);
        stream = slice[0].createPNGStream();
        stream.on('data', function(chunk) {
          return out.write(chunk);
        });
        _results.push(stream.on('end', function() {}));
      }
      return _results;
    };

    Potter.prototype["export"] = function(url) {};

    return Potter;

  })();

  pot = new Potter({
    size: [100, 100, 100]
  });

  clay = pot.createMaterial("clay", "brown");

  plastic = pot.createMaterial("plastic", "red");

  metal = pot.createMaterial("metal", "grey");

  pot.draw(5, 5, 5, plastic);

  pot.draw(4, 5, 6);

  pot.draw(5, 3, 7, metal);

  log("max size: " + (pot.computeMaxSize()));

  pot.save("examples/exports/test.pts", function() {
    return log("file saved");
  });

}).call(this);
