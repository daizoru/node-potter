// Generated by CoffeeScript 1.3.3
(function() {
  var async, fs, log, wait, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  log = require('util').log;

  _ref = require("../toolbox"), wait = _ref.wait, async = _ref.async;

  module.exports = (function() {

    function exports(path, options) {
      this.path = path;
      this.write = __bind(this.write, this);

      this.close = __bind(this.close, this);

      this.outStream = fs.createWriteStream(this.path, {
        flags: 'w'
      });
      this.onEnd = options.onEnd != null ? options.onEnd : function() {};
      this.nbPoints = options.nbPoints;
      this.width = options.width;
      this.height = options.height;
      this.depth = options.depth;
      this.matrix = options.matrix;
      this.str_e = "    endloop\n  endfacet\n";
      this.str_s = function(x, y, z) {
        return "  facet normal " + x + " " + y + " " + y + "\n    outer loop\n";
      };
      this.str_v = function(x, y, z) {
        return "      vertex " + x + " " + y + " " + z + "\n";
      };
      this.outStream.write("ply\n");
      this.outStream.write("format ascii 1.0\n");
      this.outStream.write("element vertex " + (this.nbPoints * 8) + "\n");
      this.outStream.write("property float x\n");
      this.outStream.write("property float y\n");
      this.outStream.write("property float z\n");
      this.outStream.write("element face " + (this.nbPoints * 6) + "\n");
      this.outStream.write("property list uchar int vertex_index\n");
      this.outStream.write("end_header\n");
    }

    exports.prototype.close = function() {
      var _this = this;
      return async(function() {
        return _this.onEnd();
      });
    };

    exports.prototype.write = function(position, material) {
      var b, g, intensityValue, r, x, y, z, _ref1;
      if (material.id === 0) {
        return;
      }
      log("writing!");
      x = position[0], y = position[1], z = position[2];
      intensityValue = -300;
      _ref1 = material.rgb, r = _ref1[0], g = _ref1[1], b = _ref1[2];
      if (x === 0 || this.matrix(x - 1, y, z).id <= 0) {
        this.outStream.write([this.str_s(-1, 0, 0), this.str_v(x, z + 1, y), this.str_v(x, z, y + 1), this.str_v(x, z + 1, y + 1), this.str_e].join(''));
        this.outStream.write([this.str_s(-1, 0, 0), this.str_v(x, z + 1, y), this.str_v(x, z, y), this.str_v(x, z, y + 1), this.str_e].join(''));
      }
      if (x === this.width - 1 || this.matrix(x + 1, y, z).id <= 0) {
        this.outStream.write([this.str_s(1, 0, 0), this.str_v(x + 1, z + 1, y), this.str_v(x + 1, z + 1, y + 1), this.str_v(x + 1, z, y + 1), this.str_e].join(''));
        this.outStream.write([this.str_s(1, 0, 0), this.str_v(x + 1, z + 1, y), this.str_v(x + 1, z, y + 1), this.str_v(x + 1, z, y), this.str_e].join(''));
      }
      if ((z === 0) || this.matrix(x, y, z - 1).id <= 0) {
        this.outStream.write([this.str_s(0, 0, -1), this.str_v(x, z, y), this.str_v(x + 1, z, y + 1), this.str_v(x, z, y + 1), this.str_e].join(''));
        this.outStream.write([this.str_s(0, 0, -1), this.str_v(x, z, y), this.str_v(x + 1, z, y), this.str_v(x + 1, z, y + 1), this.str_e].join(''));
      }
      if ((z === this.depth - 1) || this.matrix(x, y, z + 1).id <= 0) {
        this.outStream.write([this.str_s(0, 0, 1), this.str_v(x, z + 1, y), this.str_v(x, z + 1, y + 1), this.str_v(x + 1, z + 1, y + 1), this.str_e].join(''));
        this.outStream.write([this.str_s(0, 0, 1), this.str_v(x, z + 1, y), this.str_v(x + 1, z + 1, y + 1), this.str_v(x + 1, z + 1, y), this.str_e].join(''));
      }
      if ((y === 0) || this.matrix(x, y - 1, z).id <= 0) {
        this.outStream.write([this.str_s(0, -1, 0), this.str_v(x + 1, z, y), this.str_v(x, z + 1, y), this.str_v(x + 1, z + 1, y), this.str_e].join(''));
        this.outStream.write([this.str_s(0, -1, 0), this.str_v(x + 1, z, y), this.str_v(x, z, y), this.str_v(x, z + 1, y), this.str_e].join(''));
      }
      if ((y === this.height - 1) || this.matrix(x, y + 1, z).id <= 0) {
        this.outStream.write([this.str_s(0, 1, 0), this.str_v(x + 1, z, y + 1), this.str_v(x + 1, z + 1, y + 1), this.str_v(x, z + 1, y + 1), this.str_e].join(''));
        return this.outStream.write([this.str_s(0, 1, 0), this.str_v(x + 1, z, y + 1), this.str_v(x, z + 1, y + 1), this.str_v(x, z, y + 1), this.str_e].join(''));
      }
    };

    return exports;

  })();

}).call(this);
