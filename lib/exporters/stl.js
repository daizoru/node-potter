// Generated by CoffeeScript 1.3.3
(function() {
  var async, fs, log, wait, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  log = require('util').log;

  _ref = require("../toolbox"), wait = _ref.wait, async = _ref.async;

  module.exports = (function() {

    function exports(path, options) {
      this.path = path;
      this.write = __bind(this.write, this);

      this.close = __bind(this.close, this);

      this.onEnd = options.onEnd != null ? options.onEnd : function() {};
      this.nbPoints = options.nbPoints;
      this.width = options.width;
      this.height = options.height;
      this.depth = options.depth;
      this.matrix = options.matrix;
      this.buff = "solid Pot\n";
    }

    exports.prototype.close = function() {
      var _this = this;
      this.buff += "endsolid Pot\n";
      return fs.writeFile(this.path, this.buff, function(err) {
        if (err) {
          throw err;
        }
        return async(function() {
          return _this.onEnd();
        });
      });
    };

    exports.prototype.write = function(x, y, z, material) {
      var b, end, g, intensityValue, n, r, v, _ref1;
      if (material.id === 0) {
        return 0;
      }
      end = "    endloop\n  endfacet\n";
      n = function(x, y, z) {
        return "  facet normal " + x + " " + y + " " + z + "\n    outer loop\n";
      };
      v = function(x, y, z) {
        return "      vertex " + x + " " + y + " " + z + "\n";
      };
      intensityValue = -300;
      _ref1 = material.rgb, r = _ref1[0], g = _ref1[1], b = _ref1[2];
      if ((x === 0) || this.matrix([x - 1, y, z]).id <= 0) {
        this.buff += ("" + (n(-1, 0, 0)) + (v(x, z + 1, y)) + (v(x, z, y + 1)) + (v(x, z + 1, y + 1))) + end;
        this.buff += ("" + (n(-1, 0, 0)) + (v(x, z + 1, y)) + (v(x, z, y)) + (v(x, z, y + 1))) + end;
      }
      if (x === this.width - 1 || this.matrix([x + 1, y, z]).id <= 0) {
        this.buff += ("" + (n(1, 0, 0)) + (v(x + 1, z + 1, y)) + (v(x + 1, z + 1, y + 1)) + (v(x + 1, z, y + 1))) + end;
        this.buff += ("" + (n(1, 0, 0)) + (v(x + 1, z + 1, y)) + (v(x + 1, z, y + 1)) + (v(x + 1, z, y))) + end;
      }
      if ((z === 0) || this.matrix([x, y, z - 1]).id <= 0) {
        this.buff += ("" + (n(0, 0, -1)) + (v(x, z, y)) + (v(x + 1, z, y + 1)) + (v(x, z, y + 1))) + end;
        this.buff += ("" + (n(0, 0, -1)) + (v(x, z, y)) + (v(x + 1, z, y)) + (v(x + 1, z, y + 1))) + end;
      }
      if ((z === this.depth - 1) || this.matrix([x, y, z + 1]).id <= 0) {
        this.buff += ("" + (n(0, 0, 1)) + (v(x, z + 1, y)) + (v(x, z + 1, y + 1)) + (v(x + 1, z + 1, y + 1))) + end;
        this.buff += ("" + (n(0, 0, 1)) + (v(x, z + 1, y)) + (v(x + 1, z + 1, y + 1)) + (v(x + 1, z + 1, y))) + end;
      }
      if ((y === 0) || this.matrix([x, y - 1, z]).id <= 0) {
        this.buff += ("" + (n(0, -1, 0)) + (v(x + 1, z, y)) + (v(x, z + 1, y)) + (v(x + 1, z + 1, y))) + end;
        this.buff += ("" + (n(0, -1, 0)) + (v(x + 1, z, y)) + (v(x, z, y)) + (v(x, z + 1, y))) + end;
      }
      if ((y === this.height - 1) || this.matrix([x, y + 1, z]).id <= 0) {
        this.buff += ("" + (n(0, 1, 0)) + (v(x + 1, z, y + 1)) + (v(x + 1, z + 1, y + 1)) + (v(x, z + 1, y + 1))) + end;
        this.buff += ("" + (n(0, 1, 0)) + (v(x + 1, z, y + 1)) + (v(x, z + 1, y + 1)) + (v(x, z, y + 1))) + end;
      }
      return 1;
    };

    return exports;

  })();

}).call(this);
