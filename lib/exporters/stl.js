// Generated by CoffeeScript 1.3.3
(function() {
  var async, fs, wait, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  _ref = require("../toolbox"), wait = _ref.wait, async = _ref.async;

  module.exports = (function() {

    function exports(path, options) {
      this.path = path;
      this.write = __bind(this.write, this);

      this.close = __bind(this.close, this);

      this.outStream = fs.createWriteStream(this.path, {
        flags: 'w'
      });
      this.onEnd = options.onEnd != null ? options.onEnd : function() {};
      this.nbPoints = options.nbPoints;
      this.str_e = "    endloop\n  endfacet\n";
      this.str_s = function(x, y, z) {
        return "  facet normal " + x + " " + y + " " + y + "\n    outer loop\n";
      };
      this.str_v = function(x, y, z) {
        return "      vertex " + x + " " + y + " " + z + "\n";
      };
      this.outStream.write("start\n");
      this.outStream.write("solid Pot\n");
    }

    exports.prototype.close = function() {
      var _this = this;
      this.outStream.write("endsolid Pot\n");
      return async(function() {
        return _this.onEnd();
      });
    };

    exports.prototype.write = function(x, y, z, material) {
      var b, g, intensityValue, r, _ref1;
      if (material.id === 0) {
        return;
      }
      intensityValue = -300;
      _ref1 = material.rgb, r = _ref1[0], g = _ref1[1], b = _ref1[2];
      return;
      if (x === 0 || self.object_array[x - 1][y][z] <= 0) {
        this.outStream.write("".join([str_s(-1, 0, 0), str_v(x, z + 1, y), str_v(x, z, y + 1), str_v(x, z + 1, y + 1), str_e]));
        this.outStream.write("".join([str_s(-1, 0, 0), str_v(x, z + 1, y), str_v(x, z, y), str_v(x, z, y + 1), str_e]));
      }
      if (x === width - 1 || self.object_array[x + 1][y][z] <= 0) {
        this.outStream.write("".join([str_s(1, 0, 0), str_v(x + 1, z + 1, y), str_v(x + 1, z + 1, y + 1), str_v(x + 1, z, y + 1), str_e]));
        this.outStream.write("".join([str_s(1, 0, 0), str_v(x + 1, z + 1, y), str_v(x + 1, z, y + 1), str_v(x + 1, z, y), str_e]));
      }
      if ((z === 0) || self.object_array[x][y][z - 1] <= 0) {
        this.outStream.write("".join([str_s(0, 0, -1), str_v(x, z, y), str_v(x + 1, z, y + 1), str_v(x, z, y + 1), str_e]));
        this.outStream.write("".join([str_s(0, 0, -1), str_v(x, z, y), str_v(x + 1, z, y), str_v(x + 1, z, y + 1), str_e]));
      }
      if ((z === depth - 1) || self.object_array[x][y][z + 1] <= 0) {
        this.outStream.write("".join([str_s(0, 0, 1), str_v(x, z + 1, y), str_v(x, z + 1, y + 1), str_v(x + 1, z + 1, y + 1), str_e]));
        this.outStream.write("".join([str_s(0, 0, 1), str_v(x, z + 1, y), str_v(x + 1, z + 1, y + 1), str_v(x + 1, z + 1, y), str_e]));
      }
      if ((y === 0) || self.object_array[x][y - 1][z] <= 0) {
        this.outStream.write("".join([str_s(0, -1, 0), str_v(x + 1, z, y), str_v(x, z + 1, y), str_v(x + 1, z + 1, y), str_e]));
        this.outStream.write("".join([str_s(0, -1, 0), str_v(x + 1, z, y), str_v(x, z, y), str_v(x, z + 1, y), str_e]));
      }
      if ((y === height - 1) || self.object_array[x][y + 1][z] <= 0) {
        this.outStream.write("".join([str_s(0, 1, 0), str_v(x + 1, z, y + 1), str_v(x + 1, z + 1, y + 1), str_v(x, z + 1, y + 1), str_e]));
        return this.outStream.write("".join([str_s(0, 1, 0), str_v(x + 1, z, y + 1), str_v(x, z + 1, y + 1), str_v(x, z, y + 1), str_e]));
      }
    };

    return exports;

  })();

}).call(this);
